//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CLEAR_PAYMENT_DISCRIMINATOR: u8 = 4;

/// Accounts.
#[derive(Debug)]
pub struct ClearPayment {
      
              
          pub payer: solana_pubkey::Pubkey,
                /// New Payment PDA being created

    
              
          pub payment: solana_pubkey::Pubkey,
          
              
          pub operator_authority: solana_pubkey::Pubkey,
          
              
          pub buyer: solana_pubkey::Pubkey,
                /// Merchant PDA

    
              
          pub merchant: solana_pubkey::Pubkey,
                /// Operator PDA

    
              
          pub operator: solana_pubkey::Pubkey,
          
              
          pub merchant_operator_config: solana_pubkey::Pubkey,
          
              
          pub mint: solana_pubkey::Pubkey,
                /// Merchant Escrow ATA (Merchant PDA is owner)

    
              
          pub merchant_escrow_ata: solana_pubkey::Pubkey,
                /// Merchant Settlement ATA (Merchant settlement wallet is owner)

    
              
          pub merchant_settlement_ata: solana_pubkey::Pubkey,
                /// Operator Settlement ATA (Operator owner is owner)

    
              
          pub operator_settlement_ata: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub associated_token_program: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
                /// Event authority PDA

    
              
          pub event_authority: solana_pubkey::Pubkey,
                /// Commerce Program ID

    
              
          pub commerce_program: solana_pubkey::Pubkey,
      }

impl ClearPayment {
  pub fn instruction(&self) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(16+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.payment,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.operator_authority,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.buyer,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.merchant,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.operator,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.merchant_operator_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.merchant_escrow_ata,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.merchant_settlement_ata,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.operator_settlement_ata,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.commerce_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&ClearPaymentInstructionData::new()).unwrap();
    
    solana_instruction::Instruction {
      program_id: crate::COMMERCE_PROGRAM_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClearPaymentInstructionData {
            discriminator: u8,
      }

impl ClearPaymentInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: 4,
                  }
  }
}

impl Default for ClearPaymentInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `ClearPayment`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` payment
                ///   2. `[signer]` operator_authority
          ///   3. `[]` buyer
          ///   4. `[]` merchant
          ///   5. `[]` operator
          ///   6. `[]` merchant_operator_config
          ///   7. `[]` mint
                ///   8. `[writable]` merchant_escrow_ata
                ///   9. `[writable]` merchant_settlement_ata
                ///   10. `[writable]` operator_settlement_ata
                ///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   12. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
                ///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   14. `[optional]` event_authority (default to `3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1`)
                ///   15. `[optional]` commerce_program (default to `commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT`)
#[derive(Clone, Debug, Default)]
pub struct ClearPaymentBuilder {
            payer: Option<solana_pubkey::Pubkey>,
                payment: Option<solana_pubkey::Pubkey>,
                operator_authority: Option<solana_pubkey::Pubkey>,
                buyer: Option<solana_pubkey::Pubkey>,
                merchant: Option<solana_pubkey::Pubkey>,
                operator: Option<solana_pubkey::Pubkey>,
                merchant_operator_config: Option<solana_pubkey::Pubkey>,
                mint: Option<solana_pubkey::Pubkey>,
                merchant_escrow_ata: Option<solana_pubkey::Pubkey>,
                merchant_settlement_ata: Option<solana_pubkey::Pubkey>,
                operator_settlement_ata: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                associated_token_program: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                event_authority: Option<solana_pubkey::Pubkey>,
                commerce_program: Option<solana_pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ClearPaymentBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            /// New Payment PDA being created
#[inline(always)]
    pub fn payment(&mut self, payment: solana_pubkey::Pubkey) -> &mut Self {
                        self.payment = Some(payment);
                    self
    }
            #[inline(always)]
    pub fn operator_authority(&mut self, operator_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.operator_authority = Some(operator_authority);
                    self
    }
            #[inline(always)]
    pub fn buyer(&mut self, buyer: solana_pubkey::Pubkey) -> &mut Self {
                        self.buyer = Some(buyer);
                    self
    }
            /// Merchant PDA
#[inline(always)]
    pub fn merchant(&mut self, merchant: solana_pubkey::Pubkey) -> &mut Self {
                        self.merchant = Some(merchant);
                    self
    }
            /// Operator PDA
#[inline(always)]
    pub fn operator(&mut self, operator: solana_pubkey::Pubkey) -> &mut Self {
                        self.operator = Some(operator);
                    self
    }
            #[inline(always)]
    pub fn merchant_operator_config(&mut self, merchant_operator_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.merchant_operator_config = Some(merchant_operator_config);
                    self
    }
            #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.mint = Some(mint);
                    self
    }
            /// Merchant Escrow ATA (Merchant PDA is owner)
#[inline(always)]
    pub fn merchant_escrow_ata(&mut self, merchant_escrow_ata: solana_pubkey::Pubkey) -> &mut Self {
                        self.merchant_escrow_ata = Some(merchant_escrow_ata);
                    self
    }
            /// Merchant Settlement ATA (Merchant settlement wallet is owner)
#[inline(always)]
    pub fn merchant_settlement_ata(&mut self, merchant_settlement_ata: solana_pubkey::Pubkey) -> &mut Self {
                        self.merchant_settlement_ata = Some(merchant_settlement_ata);
                    self
    }
            /// Operator Settlement ATA (Operator owner is owner)
#[inline(always)]
    pub fn operator_settlement_ata(&mut self, operator_settlement_ata: solana_pubkey::Pubkey) -> &mut Self {
                        self.operator_settlement_ata = Some(operator_settlement_ata);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
#[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to '3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1']`
/// Event authority PDA
#[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            /// `[optional account, default to 'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT']`
/// Commerce Program ID
#[inline(always)]
    pub fn commerce_program(&mut self, commerce_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.commerce_program = Some(commerce_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = ClearPayment {
                              payer: self.payer.expect("payer is not set"),
                                        payment: self.payment.expect("payment is not set"),
                                        operator_authority: self.operator_authority.expect("operator_authority is not set"),
                                        buyer: self.buyer.expect("buyer is not set"),
                                        merchant: self.merchant.expect("merchant is not set"),
                                        operator: self.operator.expect("operator is not set"),
                                        merchant_operator_config: self.merchant_operator_config.expect("merchant_operator_config is not set"),
                                        mint: self.mint.expect("mint is not set"),
                                        merchant_escrow_ata: self.merchant_escrow_ata.expect("merchant_escrow_ata is not set"),
                                        merchant_settlement_ata: self.merchant_settlement_ata.expect("merchant_settlement_ata is not set"),
                                        operator_settlement_ata: self.operator_settlement_ata.expect("operator_settlement_ata is not set"),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        associated_token_program: self.associated_token_program.unwrap_or(solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        event_authority: self.event_authority.unwrap_or(solana_pubkey::pubkey!("3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1")),
                                        commerce_program: self.commerce_program.unwrap_or(solana_pubkey::pubkey!("commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `clear_payment` CPI accounts.
  pub struct ClearPaymentCpiAccounts<'a, 'b> {
          
                    
              pub payer: &'b solana_account_info::AccountInfo<'a>,
                        /// New Payment PDA being created

      
                    
              pub payment: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub operator_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub buyer: &'b solana_account_info::AccountInfo<'a>,
                        /// Merchant PDA

      
                    
              pub merchant: &'b solana_account_info::AccountInfo<'a>,
                        /// Operator PDA

      
                    
              pub operator: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub merchant_operator_config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub mint: &'b solana_account_info::AccountInfo<'a>,
                        /// Merchant Escrow ATA (Merchant PDA is owner)

      
                    
              pub merchant_escrow_ata: &'b solana_account_info::AccountInfo<'a>,
                        /// Merchant Settlement ATA (Merchant settlement wallet is owner)

      
                    
              pub merchant_settlement_ata: &'b solana_account_info::AccountInfo<'a>,
                        /// Operator Settlement ATA (Operator owner is owner)

      
                    
              pub operator_settlement_ata: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                        /// Event authority PDA

      
                    
              pub event_authority: &'b solana_account_info::AccountInfo<'a>,
                        /// Commerce Program ID

      
                    
              pub commerce_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `clear_payment` CPI instruction.
pub struct ClearPaymentCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub payer: &'b solana_account_info::AccountInfo<'a>,
                /// New Payment PDA being created

    
              
          pub payment: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub operator_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub buyer: &'b solana_account_info::AccountInfo<'a>,
                /// Merchant PDA

    
              
          pub merchant: &'b solana_account_info::AccountInfo<'a>,
                /// Operator PDA

    
              
          pub operator: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub merchant_operator_config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub mint: &'b solana_account_info::AccountInfo<'a>,
                /// Merchant Escrow ATA (Merchant PDA is owner)

    
              
          pub merchant_escrow_ata: &'b solana_account_info::AccountInfo<'a>,
                /// Merchant Settlement ATA (Merchant settlement wallet is owner)

    
              
          pub merchant_settlement_ata: &'b solana_account_info::AccountInfo<'a>,
                /// Operator Settlement ATA (Operator owner is owner)

    
              
          pub operator_settlement_ata: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
                /// Event authority PDA

    
              
          pub event_authority: &'b solana_account_info::AccountInfo<'a>,
                /// Commerce Program ID

    
              
          pub commerce_program: &'b solana_account_info::AccountInfo<'a>,
        }

impl<'a, 'b> ClearPaymentCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: ClearPaymentCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              payer: accounts.payer,
              payment: accounts.payment,
              operator_authority: accounts.operator_authority,
              buyer: accounts.buyer,
              merchant: accounts.merchant,
              operator: accounts.operator,
              merchant_operator_config: accounts.merchant_operator_config,
              mint: accounts.mint,
              merchant_escrow_ata: accounts.merchant_escrow_ata,
              merchant_settlement_ata: accounts.merchant_settlement_ata,
              operator_settlement_ata: accounts.operator_settlement_ata,
              token_program: accounts.token_program,
              associated_token_program: accounts.associated_token_program,
              system_program: accounts.system_program,
              event_authority: accounts.event_authority,
              commerce_program: accounts.commerce_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(16+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.payment.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.operator_authority.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.buyer.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.merchant.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.operator.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.merchant_operator_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.merchant_escrow_ata.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.merchant_settlement_ata.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.operator_settlement_ata.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.commerce_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&ClearPaymentInstructionData::new()).unwrap();
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::COMMERCE_PROGRAM_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(17 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.payer.clone());
                        account_infos.push(self.payment.clone());
                        account_infos.push(self.operator_authority.clone());
                        account_infos.push(self.buyer.clone());
                        account_infos.push(self.merchant.clone());
                        account_infos.push(self.operator.clone());
                        account_infos.push(self.merchant_operator_config.clone());
                        account_infos.push(self.mint.clone());
                        account_infos.push(self.merchant_escrow_ata.clone());
                        account_infos.push(self.merchant_settlement_ata.clone());
                        account_infos.push(self.operator_settlement_ata.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.commerce_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ClearPayment` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
                ///   1. `[writable]` payment
                ///   2. `[signer]` operator_authority
          ///   3. `[]` buyer
          ///   4. `[]` merchant
          ///   5. `[]` operator
          ///   6. `[]` merchant_operator_config
          ///   7. `[]` mint
                ///   8. `[writable]` merchant_escrow_ata
                ///   9. `[writable]` merchant_settlement_ata
                ///   10. `[writable]` operator_settlement_ata
          ///   11. `[]` token_program
          ///   12. `[]` associated_token_program
          ///   13. `[]` system_program
          ///   14. `[]` event_authority
          ///   15. `[]` commerce_program
#[derive(Clone, Debug)]
pub struct ClearPaymentCpiBuilder<'a, 'b> {
  instruction: Box<ClearPaymentCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClearPaymentCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ClearPaymentCpiBuilderInstruction {
      __program: program,
              payer: None,
              payment: None,
              operator_authority: None,
              buyer: None,
              merchant: None,
              operator: None,
              merchant_operator_config: None,
              mint: None,
              merchant_escrow_ata: None,
              merchant_settlement_ata: None,
              operator_settlement_ata: None,
              token_program: None,
              associated_token_program: None,
              system_program: None,
              event_authority: None,
              commerce_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      /// New Payment PDA being created
#[inline(always)]
    pub fn payment(&mut self, payment: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payment = Some(payment);
                    self
    }
      #[inline(always)]
    pub fn operator_authority(&mut self, operator_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.operator_authority = Some(operator_authority);
                    self
    }
      #[inline(always)]
    pub fn buyer(&mut self, buyer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.buyer = Some(buyer);
                    self
    }
      /// Merchant PDA
#[inline(always)]
    pub fn merchant(&mut self, merchant: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.merchant = Some(merchant);
                    self
    }
      /// Operator PDA
#[inline(always)]
    pub fn operator(&mut self, operator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.operator = Some(operator);
                    self
    }
      #[inline(always)]
    pub fn merchant_operator_config(&mut self, merchant_operator_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.merchant_operator_config = Some(merchant_operator_config);
                    self
    }
      #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint = Some(mint);
                    self
    }
      /// Merchant Escrow ATA (Merchant PDA is owner)
#[inline(always)]
    pub fn merchant_escrow_ata(&mut self, merchant_escrow_ata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.merchant_escrow_ata = Some(merchant_escrow_ata);
                    self
    }
      /// Merchant Settlement ATA (Merchant settlement wallet is owner)
#[inline(always)]
    pub fn merchant_settlement_ata(&mut self, merchant_settlement_ata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.merchant_settlement_ata = Some(merchant_settlement_ata);
                    self
    }
      /// Operator Settlement ATA (Operator owner is owner)
#[inline(always)]
    pub fn operator_settlement_ata(&mut self, operator_settlement_ata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.operator_settlement_ata = Some(operator_settlement_ata);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      /// Event authority PDA
#[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      /// Commerce Program ID
#[inline(always)]
    pub fn commerce_program(&mut self, commerce_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.commerce_program = Some(commerce_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = ClearPaymentCpi {
        __program: self.instruction.__program,
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          payment: self.instruction.payment.expect("payment is not set"),
                  
          operator_authority: self.instruction.operator_authority.expect("operator_authority is not set"),
                  
          buyer: self.instruction.buyer.expect("buyer is not set"),
                  
          merchant: self.instruction.merchant.expect("merchant is not set"),
                  
          operator: self.instruction.operator.expect("operator is not set"),
                  
          merchant_operator_config: self.instruction.merchant_operator_config.expect("merchant_operator_config is not set"),
                  
          mint: self.instruction.mint.expect("mint is not set"),
                  
          merchant_escrow_ata: self.instruction.merchant_escrow_ata.expect("merchant_escrow_ata is not set"),
                  
          merchant_settlement_ata: self.instruction.merchant_settlement_ata.expect("merchant_settlement_ata is not set"),
                  
          operator_settlement_ata: self.instruction.operator_settlement_ata.expect("operator_settlement_ata is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          commerce_program: self.instruction.commerce_program.expect("commerce_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ClearPaymentCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                payment: Option<&'b solana_account_info::AccountInfo<'a>>,
                operator_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                buyer: Option<&'b solana_account_info::AccountInfo<'a>>,
                merchant: Option<&'b solana_account_info::AccountInfo<'a>>,
                operator: Option<&'b solana_account_info::AccountInfo<'a>>,
                merchant_operator_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                merchant_escrow_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
                merchant_settlement_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
                operator_settlement_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                commerce_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

