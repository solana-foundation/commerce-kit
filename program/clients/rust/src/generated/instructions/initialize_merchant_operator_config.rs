//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::FeeType;
use crate::generated::types::PolicyData;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_pubkey::Pubkey;

pub const INITIALIZE_MERCHANT_OPERATOR_CONFIG_DISCRIMINATOR: u8 = 2;

/// Accounts.
#[derive(Debug)]
pub struct InitializeMerchantOperatorConfig {
    pub payer: solana_pubkey::Pubkey,
    /// Authority of the merchant
    pub authority: solana_pubkey::Pubkey,
    /// Merchant PDA
    pub merchant: solana_pubkey::Pubkey,
    /// Operator PDA
    pub operator: solana_pubkey::Pubkey,
    /// The MerchantOperatorConfig PDA being initialized
    pub config: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl InitializeMerchantOperatorConfig {
    pub fn instruction(
        &self,
        args: InitializeMerchantOperatorConfigInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeMerchantOperatorConfigInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.merchant,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.operator,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.config, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&InitializeMerchantOperatorConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::COMMERCE_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeMerchantOperatorConfigInstructionData {
    discriminator: u8,
}

impl InitializeMerchantOperatorConfigInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 2 }
    }
}

impl Default for InitializeMerchantOperatorConfigInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeMerchantOperatorConfigInstructionArgs {
    pub version: u32,
    pub bump: u8,
    pub operator_fee: u64,
    pub fee_type: FeeType,
    pub days_to_close: u16,
    pub policies: Vec<PolicyData>,
    pub accepted_currencies: Vec<Pubkey>,
}

/// Instruction builder for `InitializeMerchantOperatorConfig`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` authority
///   2. `[]` merchant
///   3. `[]` operator
///   4. `[writable]` config
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeMerchantOperatorConfigBuilder {
    payer: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    merchant: Option<solana_pubkey::Pubkey>,
    operator: Option<solana_pubkey::Pubkey>,
    config: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    version: Option<u32>,
    bump: Option<u8>,
    operator_fee: Option<u64>,
    fee_type: Option<FeeType>,
    days_to_close: Option<u16>,
    policies: Option<Vec<PolicyData>>,
    accepted_currencies: Option<Vec<Pubkey>>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializeMerchantOperatorConfigBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Authority of the merchant
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Merchant PDA
    #[inline(always)]
    pub fn merchant(&mut self, merchant: solana_pubkey::Pubkey) -> &mut Self {
        self.merchant = Some(merchant);
        self
    }
    /// Operator PDA
    #[inline(always)]
    pub fn operator(&mut self, operator: solana_pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }
    /// The MerchantOperatorConfig PDA being initialized
    #[inline(always)]
    pub fn config(&mut self, config: solana_pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn version(&mut self, version: u32) -> &mut Self {
        self.version = Some(version);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.bump = Some(bump);
        self
    }
    #[inline(always)]
    pub fn operator_fee(&mut self, operator_fee: u64) -> &mut Self {
        self.operator_fee = Some(operator_fee);
        self
    }
    #[inline(always)]
    pub fn fee_type(&mut self, fee_type: FeeType) -> &mut Self {
        self.fee_type = Some(fee_type);
        self
    }
    #[inline(always)]
    pub fn days_to_close(&mut self, days_to_close: u16) -> &mut Self {
        self.days_to_close = Some(days_to_close);
        self
    }
    #[inline(always)]
    pub fn policies(&mut self, policies: Vec<PolicyData>) -> &mut Self {
        self.policies = Some(policies);
        self
    }
    #[inline(always)]
    pub fn accepted_currencies(&mut self, accepted_currencies: Vec<Pubkey>) -> &mut Self {
        self.accepted_currencies = Some(accepted_currencies);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = InitializeMerchantOperatorConfig {
            payer: self.payer.expect("payer is not set"),
            authority: self.authority.expect("authority is not set"),
            merchant: self.merchant.expect("merchant is not set"),
            operator: self.operator.expect("operator is not set"),
            config: self.config.expect("config is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = InitializeMerchantOperatorConfigInstructionArgs {
            version: self.version.clone().expect("version is not set"),
            bump: self.bump.clone().expect("bump is not set"),
            operator_fee: self.operator_fee.clone().expect("operator_fee is not set"),
            fee_type: self.fee_type.clone().expect("fee_type is not set"),
            days_to_close: self
                .days_to_close
                .clone()
                .expect("days_to_close is not set"),
            policies: self.policies.clone().expect("policies is not set"),
            accepted_currencies: self
                .accepted_currencies
                .clone()
                .expect("accepted_currencies is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_merchant_operator_config` CPI accounts.
pub struct InitializeMerchantOperatorConfigCpiAccounts<'a, 'b> {
    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Authority of the merchant
    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Merchant PDA
    pub merchant: &'b solana_account_info::AccountInfo<'a>,
    /// Operator PDA
    pub operator: &'b solana_account_info::AccountInfo<'a>,
    /// The MerchantOperatorConfig PDA being initialized
    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `initialize_merchant_operator_config` CPI instruction.
pub struct InitializeMerchantOperatorConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// Authority of the merchant
    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Merchant PDA
    pub merchant: &'b solana_account_info::AccountInfo<'a>,
    /// Operator PDA
    pub operator: &'b solana_account_info::AccountInfo<'a>,
    /// The MerchantOperatorConfig PDA being initialized
    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeMerchantOperatorConfigInstructionArgs,
}

impl<'a, 'b> InitializeMerchantOperatorConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: InitializeMerchantOperatorConfigCpiAccounts<'a, 'b>,
        args: InitializeMerchantOperatorConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            authority: accounts.authority,
            merchant: accounts.merchant,
            operator: accounts.operator,
            config: accounts.config,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.merchant.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.operator.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&InitializeMerchantOperatorConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::COMMERCE_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.merchant.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeMerchantOperatorConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[signer]` authority
///   2. `[]` merchant
///   3. `[]` operator
///   4. `[writable]` config
///   5. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeMerchantOperatorConfigCpiBuilder<'a, 'b> {
    instruction: Box<InitializeMerchantOperatorConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeMerchantOperatorConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeMerchantOperatorConfigCpiBuilderInstruction {
            __program: program,
            payer: None,
            authority: None,
            merchant: None,
            operator: None,
            config: None,
            system_program: None,
            version: None,
            bump: None,
            operator_fee: None,
            fee_type: None,
            days_to_close: None,
            policies: None,
            accepted_currencies: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Authority of the merchant
    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Merchant PDA
    #[inline(always)]
    pub fn merchant(&mut self, merchant: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.merchant = Some(merchant);
        self
    }
    /// Operator PDA
    #[inline(always)]
    pub fn operator(&mut self, operator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }
    /// The MerchantOperatorConfig PDA being initialized
    #[inline(always)]
    pub fn config(&mut self, config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn version(&mut self, version: u32) -> &mut Self {
        self.instruction.version = Some(version);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.instruction.bump = Some(bump);
        self
    }
    #[inline(always)]
    pub fn operator_fee(&mut self, operator_fee: u64) -> &mut Self {
        self.instruction.operator_fee = Some(operator_fee);
        self
    }
    #[inline(always)]
    pub fn fee_type(&mut self, fee_type: FeeType) -> &mut Self {
        self.instruction.fee_type = Some(fee_type);
        self
    }
    #[inline(always)]
    pub fn days_to_close(&mut self, days_to_close: u16) -> &mut Self {
        self.instruction.days_to_close = Some(days_to_close);
        self
    }
    #[inline(always)]
    pub fn policies(&mut self, policies: Vec<PolicyData>) -> &mut Self {
        self.instruction.policies = Some(policies);
        self
    }
    #[inline(always)]
    pub fn accepted_currencies(&mut self, accepted_currencies: Vec<Pubkey>) -> &mut Self {
        self.instruction.accepted_currencies = Some(accepted_currencies);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = InitializeMerchantOperatorConfigInstructionArgs {
            version: self
                .instruction
                .version
                .clone()
                .expect("version is not set"),
            bump: self.instruction.bump.clone().expect("bump is not set"),
            operator_fee: self
                .instruction
                .operator_fee
                .clone()
                .expect("operator_fee is not set"),
            fee_type: self
                .instruction
                .fee_type
                .clone()
                .expect("fee_type is not set"),
            days_to_close: self
                .instruction
                .days_to_close
                .clone()
                .expect("days_to_close is not set"),
            policies: self
                .instruction
                .policies
                .clone()
                .expect("policies is not set"),
            accepted_currencies: self
                .instruction
                .accepted_currencies
                .clone()
                .expect("accepted_currencies is not set"),
        };
        let instruction = InitializeMerchantOperatorConfigCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            merchant: self.instruction.merchant.expect("merchant is not set"),

            operator: self.instruction.operator.expect("operator is not set"),

            config: self.instruction.config.expect("config is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeMerchantOperatorConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    merchant: Option<&'b solana_account_info::AccountInfo<'a>>,
    operator: Option<&'b solana_account_info::AccountInfo<'a>>,
    config: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    version: Option<u32>,
    bump: Option<u8>,
    operator_fee: Option<u64>,
    fee_type: Option<FeeType>,
    days_to_close: Option<u16>,
    policies: Option<Vec<PolicyData>>,
    accepted_currencies: Option<Vec<Pubkey>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
