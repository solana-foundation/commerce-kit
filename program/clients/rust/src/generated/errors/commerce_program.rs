//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum CommerceProgramError {
    /// 0 - Incorrect mint provided
    #[error("Incorrect mint provided")]
    InvalidMint = 0x0,
    /// 1 - Invalid payment status for the operation
    #[error("Invalid payment status for the operation")]
    InvalidPaymentStatus = 0x1,
    /// 2 - Insufficient settlement amount
    #[error("Insufficient settlement amount")]
    InsufficientSettlementAmount = 0x2,
    /// 3 - Settlement attempted too early
    #[error("Settlement attempted too early")]
    SettlementTooEarly = 0x3,
    /// 4 - Refund amount exceeds policy limit
    #[error("Refund amount exceeds policy limit")]
    RefundAmountExceedsPolicyLimit = 0x4,
    /// 5 - Refund window expired
    #[error("Refund window expired")]
    RefundWindowExpired = 0x5,
    /// 6 - Invalid event authority
    #[error("Invalid event authority")]
    InvalidEventAuthority = 0x6,
    /// 7 - Invalid ATA
    #[error("Invalid ATA")]
    InvalidAta = 0x7,
    /// 8 - Payment close window not reached
    #[error("Payment close window not reached")]
    PaymentCloseWindowNotReached = 0x8,
    /// 9 - Merchant owner does not match expected owner
    #[error("Merchant owner does not match expected owner")]
    MerchantOwnerMismatch = 0x9,
    /// 10 - Merchant PDA is invalid
    #[error("Merchant PDA is invalid")]
    MerchantInvalidPda = 0xA,
    /// 11 - Operator owner does not match expected owner
    #[error("Operator owner does not match expected owner")]
    OperatorOwnerMismatch = 0xB,
    /// 12 - Operator PDA is invalid
    #[error("Operator PDA is invalid")]
    OperatorInvalidPda = 0xC,
    /// 13 - Operator does not match config operator
    #[error("Operator does not match config operator")]
    OperatorMismatch = 0xD,
    /// 14 - Merchant does not match config merchant
    #[error("Merchant does not match config merchant")]
    MerchantMismatch = 0xE,
    /// 15 - Order ID is invalid or already used
    #[error("Order ID is invalid or already used")]
    OrderIdInvalid = 0xF,
    /// 16 - MerchantOperatorConfig PDA is invalid
    #[error("MerchantOperatorConfig PDA is invalid")]
    MerchantOperatorConfigInvalidPda = 0x10,
    /// 17 - Accepted currencies is empty
    #[error("Accepted currencies is empty")]
    AcceptedCurrenciesEmpty = 0x11,
    /// 18 - Duplicate mint in accepted currencies
    #[error("Duplicate mint in accepted currencies")]
    DuplicateMint = 0x12,
}

impl From<CommerceProgramError> for solana_program_error::ProgramError {
    fn from(e: CommerceProgramError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}

