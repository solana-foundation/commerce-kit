/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type Merchant = {
  discriminator: number;
  owner: Address;
  bump: number;
  settlementWallet: Address;
};

export type MerchantArgs = Merchant;

export function getMerchantEncoder(): FixedSizeEncoder<MerchantArgs> {
  return getStructEncoder([
    ['discriminator', getU8Encoder()],
    ['owner', getAddressEncoder()],
    ['bump', getU8Encoder()],
    ['settlementWallet', getAddressEncoder()],
  ]);
}

export function getMerchantDecoder(): FixedSizeDecoder<Merchant> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['owner', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['settlementWallet', getAddressDecoder()],
  ]);
}

export function getMerchantCodec(): FixedSizeCodec<MerchantArgs, Merchant> {
  return combineCodec(getMerchantEncoder(), getMerchantDecoder());
}

export function decodeMerchant<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Merchant, TAddress>;
export function decodeMerchant<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Merchant, TAddress>;
export function decodeMerchant<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Merchant, TAddress> | MaybeAccount<Merchant, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMerchantDecoder()
  );
}

export async function fetchMerchant<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Merchant, TAddress>> {
  const maybeAccount = await fetchMaybeMerchant(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMerchant<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Merchant, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMerchant(maybeAccount);
}

export async function fetchAllMerchant(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Merchant>[]> {
  const maybeAccounts = await fetchAllMaybeMerchant(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMerchant(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Merchant>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMerchant(maybeAccount));
}

export function getMerchantSize(): number {
  return 66;
}
