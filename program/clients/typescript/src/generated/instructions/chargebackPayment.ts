/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { address, combineCodec, getAddressEncoder, getProgramDerivedAddress, getStructDecoder, getStructEncoder, getU8Decoder, getU8Encoder, getUtf8Encoder, transformEncoder, type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { COMMERCE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CHARGEBACK_PAYMENT_DISCRIMINATOR = 6;

export function getChargebackPaymentDiscriminatorBytes() { return getU8Encoder().encode(CHARGEBACK_PAYMENT_DISCRIMINATOR); }

export type ChargebackPaymentInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
      TAccountPayer extends string | AccountMeta<string> = string, TAccountPayment extends string | AccountMeta<string> = string, TAccountOperatorAuthority extends string | AccountMeta<string> = string, TAccountBuyer extends string | AccountMeta<string> = string, TAccountMerchant extends string | AccountMeta<string> = string, TAccountOperator extends string | AccountMeta<string> = string, TAccountMerchantOperatorConfig extends string | AccountMeta<string> = string, TAccountMint extends string | AccountMeta<string> = string, TAccountMerchantEscrowAta extends string | AccountMeta<string> = string, TAccountBuyerAta extends string | AccountMeta<string> = string, TAccountTokenProgram extends string | AccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA", TAccountSystemProgram extends string | AccountMeta<string> = "11111111111111111111111111111111", TAccountEventAuthority extends string | AccountMeta<string> = "3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1", TAccountCommerceProgram extends string | AccountMeta<string> = "commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT",
    TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram>
      & InstructionWithData<ReadonlyUint8Array>
        & InstructionWithAccounts<[TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer, TAccountPayment extends string ? WritableAccount<TAccountPayment> : TAccountPayment, TAccountOperatorAuthority extends string ? ReadonlySignerAccount<TAccountOperatorAuthority> & AccountSignerMeta<TAccountOperatorAuthority> : TAccountOperatorAuthority, TAccountBuyer extends string ? ReadonlyAccount<TAccountBuyer> : TAccountBuyer, TAccountMerchant extends string ? ReadonlyAccount<TAccountMerchant> : TAccountMerchant, TAccountOperator extends string ? ReadonlyAccount<TAccountOperator> : TAccountOperator, TAccountMerchantOperatorConfig extends string ? ReadonlyAccount<TAccountMerchantOperatorConfig> : TAccountMerchantOperatorConfig, TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint, TAccountMerchantEscrowAta extends string ? WritableAccount<TAccountMerchantEscrowAta> : TAccountMerchantEscrowAta, TAccountBuyerAta extends string ? WritableAccount<TAccountBuyerAta> : TAccountBuyerAta, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram, TAccountEventAuthority extends string ? ReadonlyAccount<TAccountEventAuthority> : TAccountEventAuthority, TAccountCommerceProgram extends string ? ReadonlyAccount<TAccountCommerceProgram> : TAccountCommerceProgram, ...TRemainingAccounts]>
  ;



export type ChargebackPaymentInstructionData = { discriminator: number;  };

export type ChargebackPaymentInstructionDataArgs = {  };




export function getChargebackPaymentInstructionDataEncoder(): FixedSizeEncoder<ChargebackPaymentInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', getU8Encoder()]]), (value) => ({ ...value, discriminator: CHARGEBACK_PAYMENT_DISCRIMINATOR }));
}



export function getChargebackPaymentInstructionDataDecoder(): FixedSizeDecoder<ChargebackPaymentInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}




export function getChargebackPaymentInstructionDataCodec(): FixedSizeCodec<ChargebackPaymentInstructionDataArgs, ChargebackPaymentInstructionData> {
  return combineCodec(getChargebackPaymentInstructionDataEncoder(), getChargebackPaymentInstructionDataDecoder());
}



export type ChargebackPaymentAsyncInput<TAccountPayer extends string = string,
  TAccountPayment extends string = string,
  TAccountOperatorAuthority extends string = string,
  TAccountBuyer extends string = string,
  TAccountMerchant extends string = string,
  TAccountOperator extends string = string,
  TAccountMerchantOperatorConfig extends string = string,
  TAccountMint extends string = string,
  TAccountMerchantEscrowAta extends string = string,
  TAccountBuyerAta extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountCommerceProgram extends string = string,
  >
=  {
  payer: TransactionSigner<TAccountPayer>;
/** Payment PDA being updated */
payment: Address<TAccountPayment>;
operatorAuthority: TransactionSigner<TAccountOperatorAuthority>;
/** Chargeback destination owner */
buyer: Address<TAccountBuyer>;
/** Merchant PDA */
merchant: Address<TAccountMerchant>;
/** Operator PDA */
operator?: Address<TAccountOperator>;
/** Merchant Operator Config PDA */
merchantOperatorConfig: Address<TAccountMerchantOperatorConfig>;
mint: Address<TAccountMint>;
/** Merchant Escrow ATA (Merchant PDA is owner) */
merchantEscrowAta?: Address<TAccountMerchantEscrowAta>;
buyerAta?: Address<TAccountBuyerAta>;
tokenProgram?: Address<TAccountTokenProgram>;
systemProgram?: Address<TAccountSystemProgram>;
/** Event authority PDA */
eventAuthority?: Address<TAccountEventAuthority>;
/** Commerce Program ID */
commerceProgram?: Address<TAccountCommerceProgram>;
}


export async function getChargebackPaymentInstructionAsync<TAccountPayer extends string, TAccountPayment extends string, TAccountOperatorAuthority extends string, TAccountBuyer extends string, TAccountMerchant extends string, TAccountOperator extends string, TAccountMerchantOperatorConfig extends string, TAccountMint extends string, TAccountMerchantEscrowAta extends string, TAccountBuyerAta extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountEventAuthority extends string, TAccountCommerceProgram extends string, TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS>(input: ChargebackPaymentAsyncInput<TAccountPayer, TAccountPayment, TAccountOperatorAuthority, TAccountBuyer, TAccountMerchant, TAccountOperator, TAccountMerchantOperatorConfig, TAccountMint, TAccountMerchantEscrowAta, TAccountBuyerAta, TAccountTokenProgram, TAccountSystemProgram, TAccountEventAuthority, TAccountCommerceProgram>, config?: { programAddress?: TProgramAddress } ): Promise<ChargebackPaymentInstruction<TProgramAddress, TAccountPayer, TAccountPayment, TAccountOperatorAuthority, TAccountBuyer, TAccountMerchant, TAccountOperator, TAccountMerchantOperatorConfig, TAccountMint, TAccountMerchantEscrowAta, TAccountBuyerAta, TAccountTokenProgram, TAccountSystemProgram, TAccountEventAuthority, TAccountCommerceProgram>> {
  // Program address.
  const programAddress = config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              payer: { value: input.payer ?? null, isWritable: true },
              payment: { value: input.payment ?? null, isWritable: true },
              operatorAuthority: { value: input.operatorAuthority ?? null, isWritable: false },
              buyer: { value: input.buyer ?? null, isWritable: false },
              merchant: { value: input.merchant ?? null, isWritable: false },
              operator: { value: input.operator ?? null, isWritable: false },
              merchantOperatorConfig: { value: input.merchantOperatorConfig ?? null, isWritable: false },
              mint: { value: input.mint ?? null, isWritable: false },
              merchantEscrowAta: { value: input.merchantEscrowAta ?? null, isWritable: true },
              buyerAta: { value: input.buyerAta ?? null, isWritable: true },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
              eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
              commerceProgram: { value: input.commerceProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
  
  
  // Resolve default values.
if (!accounts.operator.value) {
accounts.operator.value = await getProgramDerivedAddress({ programAddress: 'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>, seeds: [getUtf8Encoder().encode("operator"), getAddressEncoder().encode(expectAddress(accounts.operatorAuthority.value))] });
}
if (!accounts.merchantEscrowAta.value) {
accounts.merchantEscrowAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.merchant.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.mint.value))] });
}
if (!accounts.buyerAta.value) {
accounts.buyerAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.buyer.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.mint.value))] });
}
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}
if (!accounts.eventAuthority.value) {
accounts.eventAuthority.value = '3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1' as Address<'3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1'>;
}
if (!accounts.commerceProgram.value) {
accounts.commerceProgram.value = 'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.payer),
                  getAccountMeta(accounts.payment),
                  getAccountMeta(accounts.operatorAuthority),
                  getAccountMeta(accounts.buyer),
                  getAccountMeta(accounts.merchant),
                  getAccountMeta(accounts.operator),
                  getAccountMeta(accounts.merchantOperatorConfig),
                  getAccountMeta(accounts.mint),
                  getAccountMeta(accounts.merchantEscrowAta),
                  getAccountMeta(accounts.buyerAta),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.systemProgram),
                  getAccountMeta(accounts.eventAuthority),
                  getAccountMeta(accounts.commerceProgram),
                      ]      ,    programAddress,
          data: getChargebackPaymentInstructionDataEncoder().encode({}),
      } as ChargebackPaymentInstruction<TProgramAddress, TAccountPayer, TAccountPayment, TAccountOperatorAuthority, TAccountBuyer, TAccountMerchant, TAccountOperator, TAccountMerchantOperatorConfig, TAccountMint, TAccountMerchantEscrowAta, TAccountBuyerAta, TAccountTokenProgram, TAccountSystemProgram, TAccountEventAuthority, TAccountCommerceProgram>;

      return instruction;
  }


export type ChargebackPaymentInput<TAccountPayer extends string = string,
  TAccountPayment extends string = string,
  TAccountOperatorAuthority extends string = string,
  TAccountBuyer extends string = string,
  TAccountMerchant extends string = string,
  TAccountOperator extends string = string,
  TAccountMerchantOperatorConfig extends string = string,
  TAccountMint extends string = string,
  TAccountMerchantEscrowAta extends string = string,
  TAccountBuyerAta extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountCommerceProgram extends string = string,
  >
=  {
  payer: TransactionSigner<TAccountPayer>;
/** Payment PDA being updated */
payment: Address<TAccountPayment>;
operatorAuthority: TransactionSigner<TAccountOperatorAuthority>;
/** Chargeback destination owner */
buyer: Address<TAccountBuyer>;
/** Merchant PDA */
merchant: Address<TAccountMerchant>;
/** Operator PDA */
operator: Address<TAccountOperator>;
/** Merchant Operator Config PDA */
merchantOperatorConfig: Address<TAccountMerchantOperatorConfig>;
mint: Address<TAccountMint>;
/** Merchant Escrow ATA (Merchant PDA is owner) */
merchantEscrowAta: Address<TAccountMerchantEscrowAta>;
buyerAta: Address<TAccountBuyerAta>;
tokenProgram?: Address<TAccountTokenProgram>;
systemProgram?: Address<TAccountSystemProgram>;
/** Event authority PDA */
eventAuthority?: Address<TAccountEventAuthority>;
/** Commerce Program ID */
commerceProgram?: Address<TAccountCommerceProgram>;
}


export  function getChargebackPaymentInstruction<TAccountPayer extends string, TAccountPayment extends string, TAccountOperatorAuthority extends string, TAccountBuyer extends string, TAccountMerchant extends string, TAccountOperator extends string, TAccountMerchantOperatorConfig extends string, TAccountMint extends string, TAccountMerchantEscrowAta extends string, TAccountBuyerAta extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountEventAuthority extends string, TAccountCommerceProgram extends string, TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS>(input: ChargebackPaymentInput<TAccountPayer, TAccountPayment, TAccountOperatorAuthority, TAccountBuyer, TAccountMerchant, TAccountOperator, TAccountMerchantOperatorConfig, TAccountMint, TAccountMerchantEscrowAta, TAccountBuyerAta, TAccountTokenProgram, TAccountSystemProgram, TAccountEventAuthority, TAccountCommerceProgram>, config?: { programAddress?: TProgramAddress } ): ChargebackPaymentInstruction<TProgramAddress, TAccountPayer, TAccountPayment, TAccountOperatorAuthority, TAccountBuyer, TAccountMerchant, TAccountOperator, TAccountMerchantOperatorConfig, TAccountMint, TAccountMerchantEscrowAta, TAccountBuyerAta, TAccountTokenProgram, TAccountSystemProgram, TAccountEventAuthority, TAccountCommerceProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              payer: { value: input.payer ?? null, isWritable: true },
              payment: { value: input.payment ?? null, isWritable: true },
              operatorAuthority: { value: input.operatorAuthority ?? null, isWritable: false },
              buyer: { value: input.buyer ?? null, isWritable: false },
              merchant: { value: input.merchant ?? null, isWritable: false },
              operator: { value: input.operator ?? null, isWritable: false },
              merchantOperatorConfig: { value: input.merchantOperatorConfig ?? null, isWritable: false },
              mint: { value: input.mint ?? null, isWritable: false },
              merchantEscrowAta: { value: input.merchantEscrowAta ?? null, isWritable: true },
              buyerAta: { value: input.buyerAta ?? null, isWritable: true },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
              eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
              commerceProgram: { value: input.commerceProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
  
  
  // Resolve default values.
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}
if (!accounts.eventAuthority.value) {
accounts.eventAuthority.value = '3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1' as Address<'3VSJP7faqLk6MbCaNtMYc2Y8S8hMXRsZ5cBcwh1fjMH1'>;
}
if (!accounts.commerceProgram.value) {
accounts.commerceProgram.value = 'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.payer),
                  getAccountMeta(accounts.payment),
                  getAccountMeta(accounts.operatorAuthority),
                  getAccountMeta(accounts.buyer),
                  getAccountMeta(accounts.merchant),
                  getAccountMeta(accounts.operator),
                  getAccountMeta(accounts.merchantOperatorConfig),
                  getAccountMeta(accounts.mint),
                  getAccountMeta(accounts.merchantEscrowAta),
                  getAccountMeta(accounts.buyerAta),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.systemProgram),
                  getAccountMeta(accounts.eventAuthority),
                  getAccountMeta(accounts.commerceProgram),
                      ]      ,    programAddress,
          data: getChargebackPaymentInstructionDataEncoder().encode({}),
      } as ChargebackPaymentInstruction<TProgramAddress, TAccountPayer, TAccountPayment, TAccountOperatorAuthority, TAccountBuyer, TAccountMerchant, TAccountOperator, TAccountMerchantOperatorConfig, TAccountMint, TAccountMerchantEscrowAta, TAccountBuyerAta, TAccountTokenProgram, TAccountSystemProgram, TAccountEventAuthority, TAccountCommerceProgram>;

      return instruction;
  }


export type ParsedChargebackPaymentInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
      TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      payer: TAccountMetas[0],
                        /** Payment PDA being updated */
                payment: TAccountMetas[1],
                      operatorAuthority: TAccountMetas[2],
                        /** Chargeback destination owner */
                buyer: TAccountMetas[3],
                        /** Merchant PDA */
                merchant: TAccountMetas[4],
                        /** Operator PDA */
                operator: TAccountMetas[5],
                        /** Merchant Operator Config PDA */
                merchantOperatorConfig: TAccountMetas[6],
                      mint: TAccountMetas[7],
                        /** Merchant Escrow ATA (Merchant PDA is owner) */
                merchantEscrowAta: TAccountMetas[8],
                      buyerAta: TAccountMetas[9],
                      tokenProgram: TAccountMetas[10],
                      systemProgram: TAccountMetas[11],
                        /** Event authority PDA */
                eventAuthority: TAccountMetas[12],
                        /** Commerce Program ID */
                commerceProgram: TAccountMetas[13],
          };
        data: ChargebackPaymentInstructionData;
  };

export function parseChargebackPaymentInstruction<
  TProgram extends string,
      TAccountMetas extends readonly AccountMeta[],
  >(
  instruction: Instruction<TProgram>
          & InstructionWithAccounts<TAccountMetas>
              & InstructionWithData<ReadonlyUint8Array>
    ): ParsedChargebackPaymentInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 14) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              payer: getNextAccount(),
                                        payment: getNextAccount(),
                                        operatorAuthority: getNextAccount(),
                                        buyer: getNextAccount(),
                                        merchant: getNextAccount(),
                                        operator: getNextAccount(),
                                        merchantOperatorConfig: getNextAccount(),
                                        mint: getNextAccount(),
                                        merchantEscrowAta: getNextAccount(),
                                        buyerAta: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                                        systemProgram: getNextAccount(),
                                        eventAuthority: getNextAccount(),
                                        commerceProgram: getNextAccount(),
                        },
              data: getChargebackPaymentInstructionDataDecoder().decode(instruction.data),
      };
}

