/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  AccountRole,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { COMMERCE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getFeeTypeDecoder,
  getFeeTypeEncoder,
  getPolicyDataDecoder,
  getPolicyDataEncoder,
  type FeeType,
  type FeeTypeArgs,
  type PolicyData,
  type PolicyDataArgs,
} from '../types';

export const INITIALIZE_MERCHANT_OPERATOR_CONFIG_DISCRIMINATOR = 2;

export function getInitializeMerchantOperatorConfigDiscriminatorBytes() {
  return getU8Encoder().encode(
    INITIALIZE_MERCHANT_OPERATOR_CONFIG_DISCRIMINATOR
  );
}

export type InitializeMerchantOperatorConfigInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMerchant extends string | AccountMeta<string> = string,
  TAccountOperator extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMerchant extends string
        ? ReadonlyAccount<TAccountMerchant>
        : TAccountMerchant,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeMerchantOperatorConfigInstructionData = {
  discriminator: number;
  version: number;
  bump: number;
  operatorFee: bigint;
  feeType: FeeType;
  daysToClose: number;
  policies: Array<PolicyData>;
  acceptedCurrencies: Array<Address>;
};

export type InitializeMerchantOperatorConfigInstructionDataArgs = {
  version: number;
  bump: number;
  operatorFee: number | bigint;
  feeType: FeeTypeArgs;
  daysToClose: number;
  policies: Array<PolicyDataArgs>;
  acceptedCurrencies: Array<Address>;
};

export function getInitializeMerchantOperatorConfigInstructionDataEncoder(): Encoder<InitializeMerchantOperatorConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['version', getU32Encoder()],
      ['bump', getU8Encoder()],
      ['operatorFee', getU64Encoder()],
      ['feeType', getFeeTypeEncoder()],
      ['daysToClose', getU16Encoder()],
      ['policies', getArrayEncoder(getPolicyDataEncoder())],
      ['acceptedCurrencies', getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_MERCHANT_OPERATOR_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getInitializeMerchantOperatorConfigInstructionDataDecoder(): Decoder<InitializeMerchantOperatorConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['version', getU32Decoder()],
    ['bump', getU8Decoder()],
    ['operatorFee', getU64Decoder()],
    ['feeType', getFeeTypeDecoder()],
    ['daysToClose', getU16Decoder()],
    ['policies', getArrayDecoder(getPolicyDataDecoder())],
    ['acceptedCurrencies', getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getInitializeMerchantOperatorConfigInstructionDataCodec(): Codec<
  InitializeMerchantOperatorConfigInstructionDataArgs,
  InitializeMerchantOperatorConfigInstructionData
> {
  return combineCodec(
    getInitializeMerchantOperatorConfigInstructionDataEncoder(),
    getInitializeMerchantOperatorConfigInstructionDataDecoder()
  );
}

export type InitializeMerchantOperatorConfigAsyncInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountOperator extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  /** Authority of the merchant */
  authority: TransactionSigner<TAccountAuthority>;
  /** Merchant PDA */
  merchant: Address<TAccountMerchant>;
  /** Operator PDA */
  operator: Address<TAccountOperator>;
  /** The MerchantOperatorConfig PDA being initialized */
  config?: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  version: InitializeMerchantOperatorConfigInstructionDataArgs['version'];
  bump: InitializeMerchantOperatorConfigInstructionDataArgs['bump'];
  operatorFee: InitializeMerchantOperatorConfigInstructionDataArgs['operatorFee'];
  feeType: InitializeMerchantOperatorConfigInstructionDataArgs['feeType'];
  daysToClose: InitializeMerchantOperatorConfigInstructionDataArgs['daysToClose'];
  policies: InitializeMerchantOperatorConfigInstructionDataArgs['policies'];
  acceptedCurrencies: InitializeMerchantOperatorConfigInstructionDataArgs['acceptedCurrencies'];
};

export async function getInitializeMerchantOperatorConfigInstructionAsync<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountMerchant extends string,
  TAccountOperator extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeMerchantOperatorConfigAsyncInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountOperator,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeMerchantOperatorConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountOperator,
    TAccountConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    merchant: { value: input.merchant ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress:
        'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>,
      seeds: [
        getUtf8Encoder().encode('merchant_operator_config'),
        getAddressEncoder().encode(expectAddress(accounts.merchant.value)),
        getAddressEncoder().encode(expectAddress(accounts.operator.value)),
        getU32Encoder().encode(expectSome(args.version)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = args.acceptedCurrencies.map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getInitializeMerchantOperatorConfigInstructionDataEncoder().encode(
      args as InitializeMerchantOperatorConfigInstructionDataArgs
    ),
  } as InitializeMerchantOperatorConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountOperator,
    TAccountConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeMerchantOperatorConfigInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountOperator extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  /** Authority of the merchant */
  authority: TransactionSigner<TAccountAuthority>;
  /** Merchant PDA */
  merchant: Address<TAccountMerchant>;
  /** Operator PDA */
  operator: Address<TAccountOperator>;
  /** The MerchantOperatorConfig PDA being initialized */
  config: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  version: InitializeMerchantOperatorConfigInstructionDataArgs['version'];
  bump: InitializeMerchantOperatorConfigInstructionDataArgs['bump'];
  operatorFee: InitializeMerchantOperatorConfigInstructionDataArgs['operatorFee'];
  feeType: InitializeMerchantOperatorConfigInstructionDataArgs['feeType'];
  daysToClose: InitializeMerchantOperatorConfigInstructionDataArgs['daysToClose'];
  policies: InitializeMerchantOperatorConfigInstructionDataArgs['policies'];
  acceptedCurrencies: InitializeMerchantOperatorConfigInstructionDataArgs['acceptedCurrencies'];
};

export function getInitializeMerchantOperatorConfigInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountMerchant extends string,
  TAccountOperator extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeMerchantOperatorConfigInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountOperator,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeMerchantOperatorConfigInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountMerchant,
  TAccountOperator,
  TAccountConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    merchant: { value: input.merchant ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] = args.acceptedCurrencies.map(
    (address) => ({ address, role: AccountRole.READONLY })
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    programAddress,
    data: getInitializeMerchantOperatorConfigInstructionDataEncoder().encode(
      args as InitializeMerchantOperatorConfigInstructionDataArgs
    ),
  } as InitializeMerchantOperatorConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountOperator,
    TAccountConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeMerchantOperatorConfigInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    /** Authority of the merchant */
    authority: TAccountMetas[1];
    /** Merchant PDA */
    merchant: TAccountMetas[2];
    /** Operator PDA */
    operator: TAccountMetas[3];
    /** The MerchantOperatorConfig PDA being initialized */
    config: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: InitializeMerchantOperatorConfigInstructionData;
};

export function parseInitializeMerchantOperatorConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeMerchantOperatorConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      merchant: getNextAccount(),
      operator: getNextAccount(),
      config: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeMerchantOperatorConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
