/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { COMMERCE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_PAYMENT_PERMISSIONLESS_DISCRIMINATOR = 10;

export function getClosePaymentPermissionlessDiscriminatorBytes() {
  return getU8Encoder().encode(CLOSE_PAYMENT_PERMISSIONLESS_DISCRIMINATOR);
}

export type ClosePaymentPermissionlessInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountPayment extends string | AccountMeta<string> = string,
  TAccountOperator extends string | AccountMeta<string> = string,
  TAccountMerchant extends string | AccountMeta<string> = string,
  TAccountBuyer extends string | AccountMeta<string> = string,
  TAccountMerchantOperatorConfig extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountPayment extends string
        ? WritableAccount<TAccountPayment>
        : TAccountPayment,
      TAccountOperator extends string
        ? ReadonlyAccount<TAccountOperator>
        : TAccountOperator,
      TAccountMerchant extends string
        ? ReadonlyAccount<TAccountMerchant>
        : TAccountMerchant,
      TAccountBuyer extends string
        ? ReadonlyAccount<TAccountBuyer>
        : TAccountBuyer,
      TAccountMerchantOperatorConfig extends string
        ? ReadonlyAccount<TAccountMerchantOperatorConfig>
        : TAccountMerchantOperatorConfig,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClosePaymentPermissionlessInstructionData = {
  discriminator: number;
};

export type ClosePaymentPermissionlessInstructionDataArgs = {};

export function getClosePaymentPermissionlessInstructionDataEncoder(): FixedSizeEncoder<ClosePaymentPermissionlessInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_PAYMENT_PERMISSIONLESS_DISCRIMINATOR,
    })
  );
}

export function getClosePaymentPermissionlessInstructionDataDecoder(): FixedSizeDecoder<ClosePaymentPermissionlessInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getClosePaymentPermissionlessInstructionDataCodec(): FixedSizeCodec<
  ClosePaymentPermissionlessInstructionDataArgs,
  ClosePaymentPermissionlessInstructionData
> {
  return combineCodec(
    getClosePaymentPermissionlessInstructionDataEncoder(),
    getClosePaymentPermissionlessInstructionDataDecoder()
  );
}

export type ClosePaymentPermissionlessInput<
  TAccountPayer extends string = string,
  TAccountPayment extends string = string,
  TAccountOperator extends string = string,
  TAccountMerchant extends string = string,
  TAccountBuyer extends string = string,
  TAccountMerchantOperatorConfig extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  /** Payment PDA to close */
  payment: Address<TAccountPayment>;
  /** Operator PDA */
  operator: Address<TAccountOperator>;
  /** Merchant PDA */
  merchant: Address<TAccountMerchant>;
  /** Buyer account */
  buyer: Address<TAccountBuyer>;
  /** Merchant Operator Config PDA */
  merchantOperatorConfig: Address<TAccountMerchantOperatorConfig>;
  /** Token mint */
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getClosePaymentPermissionlessInstruction<
  TAccountPayer extends string,
  TAccountPayment extends string,
  TAccountOperator extends string,
  TAccountMerchant extends string,
  TAccountBuyer extends string,
  TAccountMerchantOperatorConfig extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ClosePaymentPermissionlessInput<
    TAccountPayer,
    TAccountPayment,
    TAccountOperator,
    TAccountMerchant,
    TAccountBuyer,
    TAccountMerchantOperatorConfig,
    TAccountMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClosePaymentPermissionlessInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountPayment,
  TAccountOperator,
  TAccountMerchant,
  TAccountBuyer,
  TAccountMerchantOperatorConfig,
  TAccountMint,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    payment: { value: input.payment ?? null, isWritable: true },
    operator: { value: input.operator ?? null, isWritable: false },
    merchant: { value: input.merchant ?? null, isWritable: false },
    buyer: { value: input.buyer ?? null, isWritable: false },
    merchantOperatorConfig: {
      value: input.merchantOperatorConfig ?? null,
      isWritable: false,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.payment),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.merchantOperatorConfig),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClosePaymentPermissionlessInstructionDataEncoder().encode({}),
  } as ClosePaymentPermissionlessInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountPayment,
    TAccountOperator,
    TAccountMerchant,
    TAccountBuyer,
    TAccountMerchantOperatorConfig,
    TAccountMint,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClosePaymentPermissionlessInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    /** Payment PDA to close */
    payment: TAccountMetas[1];
    /** Operator PDA */
    operator: TAccountMetas[2];
    /** Merchant PDA */
    merchant: TAccountMetas[3];
    /** Buyer account */
    buyer: TAccountMetas[4];
    /** Merchant Operator Config PDA */
    merchantOperatorConfig: TAccountMetas[5];
    /** Token mint */
    mint: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: ClosePaymentPermissionlessInstructionData;
};

export function parseClosePaymentPermissionlessInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClosePaymentPermissionlessInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      payment: getNextAccount(),
      operator: getNextAccount(),
      merchant: getNextAccount(),
      buyer: getNextAccount(),
      merchantOperatorConfig: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClosePaymentPermissionlessInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
