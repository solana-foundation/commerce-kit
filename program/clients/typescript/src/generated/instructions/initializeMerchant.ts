/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { COMMERCE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_MERCHANT_DISCRIMINATOR = 0;

export function getInitializeMerchantDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_MERCHANT_DISCRIMINATOR);
}

export type InitializeMerchantInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMerchant extends string | AccountMeta<string> = string,
  TAccountSettlementWallet extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMerchant extends string
        ? WritableAccount<TAccountMerchant>
        : TAccountMerchant,
      TAccountSettlementWallet extends string
        ? ReadonlyAccount<TAccountSettlementWallet>
        : TAccountSettlementWallet,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeMerchantInstructionData = {
  discriminator: number;
  bump: number;
};

export type InitializeMerchantInstructionDataArgs = { bump: number };

export function getInitializeMerchantInstructionDataEncoder(): FixedSizeEncoder<InitializeMerchantInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_MERCHANT_DISCRIMINATOR })
  );
}

export function getInitializeMerchantInstructionDataDecoder(): FixedSizeDecoder<InitializeMerchantInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getInitializeMerchantInstructionDataCodec(): FixedSizeCodec<
  InitializeMerchantInstructionDataArgs,
  InitializeMerchantInstructionData
> {
  return combineCodec(
    getInitializeMerchantInstructionDataEncoder(),
    getInitializeMerchantInstructionDataDecoder()
  );
}

export type InitializeMerchantAsyncInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountSettlementWallet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  merchant?: Address<TAccountMerchant>;
  settlementWallet: Address<TAccountSettlementWallet>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: InitializeMerchantInstructionDataArgs['bump'];
};

export async function getInitializeMerchantInstructionAsync<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountMerchant extends string,
  TAccountSettlementWallet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeMerchantAsyncInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountSettlementWallet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeMerchantInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountSettlementWallet,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    merchant: { value: input.merchant ?? null, isWritable: true },
    settlementWallet: {
      value: input.settlementWallet ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.merchant.value) {
    accounts.merchant.value = await getProgramDerivedAddress({
      programAddress:
        'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>,
      seeds: [
        getUtf8Encoder().encode('merchant'),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.settlementWallet),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeMerchantInstructionDataEncoder().encode(
      args as InitializeMerchantInstructionDataArgs
    ),
    programAddress,
  } as InitializeMerchantInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountSettlementWallet,
    TAccountSystemProgram
  >);
}

export type InitializeMerchantInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountSettlementWallet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  merchant: Address<TAccountMerchant>;
  settlementWallet: Address<TAccountSettlementWallet>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: InitializeMerchantInstructionDataArgs['bump'];
};

export function getInitializeMerchantInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountMerchant extends string,
  TAccountSettlementWallet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeMerchantInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountSettlementWallet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeMerchantInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountMerchant,
  TAccountSettlementWallet,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    merchant: { value: input.merchant ?? null, isWritable: true },
    settlementWallet: {
      value: input.settlementWallet ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.settlementWallet),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeMerchantInstructionDataEncoder().encode(
      args as InitializeMerchantInstructionDataArgs
    ),
    programAddress,
  } as InitializeMerchantInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountSettlementWallet,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeMerchantInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    authority: TAccountMetas[1];
    merchant: TAccountMetas[2];
    settlementWallet: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeMerchantInstructionData;
};

export function parseInitializeMerchantInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeMerchantInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      merchant: getNextAccount(),
      settlementWallet: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeMerchantInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
