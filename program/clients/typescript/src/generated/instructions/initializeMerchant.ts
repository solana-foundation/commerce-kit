/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { address, combineCodec, getAddressEncoder, getProgramDerivedAddress, getStructDecoder, getStructEncoder, getU8Decoder, getU8Encoder, getUtf8Encoder, transformEncoder, type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { COMMERCE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_MERCHANT_DISCRIMINATOR = 0;

export function getInitializeMerchantDiscriminatorBytes() { return getU8Encoder().encode(INITIALIZE_MERCHANT_DISCRIMINATOR); }

export type InitializeMerchantInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
      TAccountPayer extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TAccountMerchant extends string | AccountMeta<string> = string, TAccountSettlementWallet extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = "11111111111111111111111111111111", TAccountSettlementUsdcAta extends string | AccountMeta<string> = string, TAccountEscrowUsdcAta extends string | AccountMeta<string> = string, TAccountUsdcMint extends string | AccountMeta<string> = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", TAccountSettlementUsdtAta extends string | AccountMeta<string> = string, TAccountEscrowUsdtAta extends string | AccountMeta<string> = string, TAccountUsdtMint extends string | AccountMeta<string> = "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB", TAccountTokenProgram extends string | AccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA", TAccountAssociatedTokenProgram extends string | AccountMeta<string> = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
    TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram>
      & InstructionWithData<ReadonlyUint8Array>
        & InstructionWithAccounts<[TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer, TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountMerchant extends string ? WritableAccount<TAccountMerchant> : TAccountMerchant, TAccountSettlementWallet extends string ? ReadonlyAccount<TAccountSettlementWallet> : TAccountSettlementWallet, TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram, TAccountSettlementUsdcAta extends string ? WritableAccount<TAccountSettlementUsdcAta> : TAccountSettlementUsdcAta, TAccountEscrowUsdcAta extends string ? WritableAccount<TAccountEscrowUsdcAta> : TAccountEscrowUsdcAta, TAccountUsdcMint extends string ? ReadonlyAccount<TAccountUsdcMint> : TAccountUsdcMint, TAccountSettlementUsdtAta extends string ? WritableAccount<TAccountSettlementUsdtAta> : TAccountSettlementUsdtAta, TAccountEscrowUsdtAta extends string ? WritableAccount<TAccountEscrowUsdtAta> : TAccountEscrowUsdtAta, TAccountUsdtMint extends string ? ReadonlyAccount<TAccountUsdtMint> : TAccountUsdtMint, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram, ...TRemainingAccounts]>
  ;



export type InitializeMerchantInstructionData = { discriminator: number; bump: number;  };

export type InitializeMerchantInstructionDataArgs = { bump: number;  };




export function getInitializeMerchantInstructionDataEncoder(): FixedSizeEncoder<InitializeMerchantInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', getU8Encoder()], ['bump', getU8Encoder()]]), (value) => ({ ...value, discriminator: INITIALIZE_MERCHANT_DISCRIMINATOR }));
}



export function getInitializeMerchantInstructionDataDecoder(): FixedSizeDecoder<InitializeMerchantInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()], ['bump', getU8Decoder()]]);
}




export function getInitializeMerchantInstructionDataCodec(): FixedSizeCodec<InitializeMerchantInstructionDataArgs, InitializeMerchantInstructionData> {
  return combineCodec(getInitializeMerchantInstructionDataEncoder(), getInitializeMerchantInstructionDataDecoder());
}



export type InitializeMerchantAsyncInput<TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountSettlementWallet extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSettlementUsdcAta extends string = string,
  TAccountEscrowUsdcAta extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountSettlementUsdtAta extends string = string,
  TAccountEscrowUsdtAta extends string = string,
  TAccountUsdtMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  >
=  {
  payer: TransactionSigner<TAccountPayer>;
authority: TransactionSigner<TAccountAuthority>;
merchant?: Address<TAccountMerchant>;
settlementWallet: Address<TAccountSettlementWallet>;
systemProgram?: Address<TAccountSystemProgram>;
settlementUsdcAta?: Address<TAccountSettlementUsdcAta>;
escrowUsdcAta?: Address<TAccountEscrowUsdcAta>;
usdcMint?: Address<TAccountUsdcMint>;
settlementUsdtAta?: Address<TAccountSettlementUsdtAta>;
escrowUsdtAta?: Address<TAccountEscrowUsdtAta>;
usdtMint?: Address<TAccountUsdtMint>;
tokenProgram?: Address<TAccountTokenProgram>;
associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;bump: InitializeMerchantInstructionDataArgs["bump"];
}


export async function getInitializeMerchantInstructionAsync<TAccountPayer extends string, TAccountAuthority extends string, TAccountMerchant extends string, TAccountSettlementWallet extends string, TAccountSystemProgram extends string, TAccountSettlementUsdcAta extends string, TAccountEscrowUsdcAta extends string, TAccountUsdcMint extends string, TAccountSettlementUsdtAta extends string, TAccountEscrowUsdtAta extends string, TAccountUsdtMint extends string, TAccountTokenProgram extends string, TAccountAssociatedTokenProgram extends string, TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS>(input: InitializeMerchantAsyncInput<TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountSettlementWallet, TAccountSystemProgram, TAccountSettlementUsdcAta, TAccountEscrowUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountEscrowUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram>, config?: { programAddress?: TProgramAddress } ): Promise<InitializeMerchantInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountSettlementWallet, TAccountSystemProgram, TAccountSettlementUsdcAta, TAccountEscrowUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountEscrowUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram>> {
  // Program address.
  const programAddress = config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              payer: { value: input.payer ?? null, isWritable: true },
              authority: { value: input.authority ?? null, isWritable: false },
              merchant: { value: input.merchant ?? null, isWritable: true },
              settlementWallet: { value: input.settlementWallet ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
              settlementUsdcAta: { value: input.settlementUsdcAta ?? null, isWritable: true },
              escrowUsdcAta: { value: input.escrowUsdcAta ?? null, isWritable: true },
              usdcMint: { value: input.usdcMint ?? null, isWritable: false },
              settlementUsdtAta: { value: input.settlementUsdtAta ?? null, isWritable: true },
              escrowUsdtAta: { value: input.escrowUsdtAta ?? null, isWritable: true },
              usdtMint: { value: input.usdtMint ?? null, isWritable: false },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              associatedTokenProgram: { value: input.associatedTokenProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.merchant.value) {
accounts.merchant.value = await getProgramDerivedAddress({ programAddress: 'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>, seeds: [getUtf8Encoder().encode("merchant"), getAddressEncoder().encode(expectAddress(accounts.authority.value))] });
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}
if (!accounts.usdcMint.value) {
accounts.usdcMint.value = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v' as Address<'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'>;
}
if (!accounts.settlementUsdcAta.value) {
accounts.settlementUsdcAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.settlementWallet.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.usdcMint.value))] });
}
if (!accounts.escrowUsdcAta.value) {
accounts.escrowUsdcAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.merchant.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.usdcMint.value))] });
}
if (!accounts.usdtMint.value) {
accounts.usdtMint.value = 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB' as Address<'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'>;
}
if (!accounts.settlementUsdtAta.value) {
accounts.settlementUsdtAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.settlementWallet.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.usdtMint.value))] });
}
if (!accounts.escrowUsdtAta.value) {
accounts.escrowUsdtAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.merchant.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.usdtMint.value))] });
}
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.associatedTokenProgram.value) {
accounts.associatedTokenProgram.value = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.payer),
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.merchant),
                  getAccountMeta(accounts.settlementWallet),
                  getAccountMeta(accounts.systemProgram),
                  getAccountMeta(accounts.settlementUsdcAta),
                  getAccountMeta(accounts.escrowUsdcAta),
                  getAccountMeta(accounts.usdcMint),
                  getAccountMeta(accounts.settlementUsdtAta),
                  getAccountMeta(accounts.escrowUsdtAta),
                  getAccountMeta(accounts.usdtMint),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.associatedTokenProgram),
                      ]      ,    programAddress,
          data: getInitializeMerchantInstructionDataEncoder().encode(args as InitializeMerchantInstructionDataArgs),
      } as InitializeMerchantInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountSettlementWallet, TAccountSystemProgram, TAccountSettlementUsdcAta, TAccountEscrowUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountEscrowUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram>;

      return instruction;
  }


export type InitializeMerchantInput<TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountSettlementWallet extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSettlementUsdcAta extends string = string,
  TAccountEscrowUsdcAta extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountSettlementUsdtAta extends string = string,
  TAccountEscrowUsdtAta extends string = string,
  TAccountUsdtMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  >
=  {
  payer: TransactionSigner<TAccountPayer>;
authority: TransactionSigner<TAccountAuthority>;
merchant: Address<TAccountMerchant>;
settlementWallet: Address<TAccountSettlementWallet>;
systemProgram?: Address<TAccountSystemProgram>;
settlementUsdcAta: Address<TAccountSettlementUsdcAta>;
escrowUsdcAta: Address<TAccountEscrowUsdcAta>;
usdcMint?: Address<TAccountUsdcMint>;
settlementUsdtAta: Address<TAccountSettlementUsdtAta>;
escrowUsdtAta: Address<TAccountEscrowUsdtAta>;
usdtMint?: Address<TAccountUsdtMint>;
tokenProgram?: Address<TAccountTokenProgram>;
associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;bump: InitializeMerchantInstructionDataArgs["bump"];
}


export  function getInitializeMerchantInstruction<TAccountPayer extends string, TAccountAuthority extends string, TAccountMerchant extends string, TAccountSettlementWallet extends string, TAccountSystemProgram extends string, TAccountSettlementUsdcAta extends string, TAccountEscrowUsdcAta extends string, TAccountUsdcMint extends string, TAccountSettlementUsdtAta extends string, TAccountEscrowUsdtAta extends string, TAccountUsdtMint extends string, TAccountTokenProgram extends string, TAccountAssociatedTokenProgram extends string, TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS>(input: InitializeMerchantInput<TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountSettlementWallet, TAccountSystemProgram, TAccountSettlementUsdcAta, TAccountEscrowUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountEscrowUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram>, config?: { programAddress?: TProgramAddress } ): InitializeMerchantInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountSettlementWallet, TAccountSystemProgram, TAccountSettlementUsdcAta, TAccountEscrowUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountEscrowUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              payer: { value: input.payer ?? null, isWritable: true },
              authority: { value: input.authority ?? null, isWritable: false },
              merchant: { value: input.merchant ?? null, isWritable: true },
              settlementWallet: { value: input.settlementWallet ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
              settlementUsdcAta: { value: input.settlementUsdcAta ?? null, isWritable: true },
              escrowUsdcAta: { value: input.escrowUsdcAta ?? null, isWritable: true },
              usdcMint: { value: input.usdcMint ?? null, isWritable: false },
              settlementUsdtAta: { value: input.settlementUsdtAta ?? null, isWritable: true },
              escrowUsdtAta: { value: input.escrowUsdtAta ?? null, isWritable: true },
              usdtMint: { value: input.usdtMint ?? null, isWritable: false },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              associatedTokenProgram: { value: input.associatedTokenProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
      // Original args.
    const args = { ...input,  };
  
  
  // Resolve default values.
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}
if (!accounts.usdcMint.value) {
accounts.usdcMint.value = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v' as Address<'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'>;
}
if (!accounts.usdtMint.value) {
accounts.usdtMint.value = 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB' as Address<'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'>;
}
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.associatedTokenProgram.value) {
accounts.associatedTokenProgram.value = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.payer),
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.merchant),
                  getAccountMeta(accounts.settlementWallet),
                  getAccountMeta(accounts.systemProgram),
                  getAccountMeta(accounts.settlementUsdcAta),
                  getAccountMeta(accounts.escrowUsdcAta),
                  getAccountMeta(accounts.usdcMint),
                  getAccountMeta(accounts.settlementUsdtAta),
                  getAccountMeta(accounts.escrowUsdtAta),
                  getAccountMeta(accounts.usdtMint),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.associatedTokenProgram),
                      ]      ,    programAddress,
          data: getInitializeMerchantInstructionDataEncoder().encode(args as InitializeMerchantInstructionDataArgs),
      } as InitializeMerchantInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountSettlementWallet, TAccountSystemProgram, TAccountSettlementUsdcAta, TAccountEscrowUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountEscrowUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram>;

      return instruction;
  }


export type ParsedInitializeMerchantInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
      TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      payer: TAccountMetas[0],
                      authority: TAccountMetas[1],
                      merchant: TAccountMetas[2],
                      settlementWallet: TAccountMetas[3],
                      systemProgram: TAccountMetas[4],
                      settlementUsdcAta: TAccountMetas[5],
                      escrowUsdcAta: TAccountMetas[6],
                      usdcMint: TAccountMetas[7],
                      settlementUsdtAta: TAccountMetas[8],
                      escrowUsdtAta: TAccountMetas[9],
                      usdtMint: TAccountMetas[10],
                      tokenProgram: TAccountMetas[11],
                      associatedTokenProgram: TAccountMetas[12],
          };
        data: InitializeMerchantInstructionData;
  };

export function parseInitializeMerchantInstruction<
  TProgram extends string,
      TAccountMetas extends readonly AccountMeta[],
  >(
  instruction: Instruction<TProgram>
          & InstructionWithAccounts<TAccountMetas>
              & InstructionWithData<ReadonlyUint8Array>
    ): ParsedInitializeMerchantInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 13) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              payer: getNextAccount(),
                                        authority: getNextAccount(),
                                        merchant: getNextAccount(),
                                        settlementWallet: getNextAccount(),
                                        systemProgram: getNextAccount(),
                                        settlementUsdcAta: getNextAccount(),
                                        escrowUsdcAta: getNextAccount(),
                                        usdcMint: getNextAccount(),
                                        settlementUsdtAta: getNextAccount(),
                                        escrowUsdtAta: getNextAccount(),
                                        usdtMint: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                                        associatedTokenProgram: getNextAccount(),
                        },
              data: getInitializeMerchantInstructionDataDecoder().decode(instruction.data),
      };
}

