/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { address, combineCodec, getAddressEncoder, getProgramDerivedAddress, getStructDecoder, getStructEncoder, getU8Decoder, getU8Encoder, getUtf8Encoder, transformEncoder, type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { COMMERCE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_MERCHANT_SETTLEMENT_WALLET_DISCRIMINATOR = 7;

export function getUpdateMerchantSettlementWalletDiscriminatorBytes() { return getU8Encoder().encode(UPDATE_MERCHANT_SETTLEMENT_WALLET_DISCRIMINATOR); }

export type UpdateMerchantSettlementWalletInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
      TAccountPayer extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TAccountMerchant extends string | AccountMeta<string> = string, TAccountNewSettlementWallet extends string | AccountMeta<string> = string, TAccountSettlementUsdcAta extends string | AccountMeta<string> = string, TAccountUsdcMint extends string | AccountMeta<string> = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", TAccountSettlementUsdtAta extends string | AccountMeta<string> = string, TAccountUsdtMint extends string | AccountMeta<string> = "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB", TAccountTokenProgram extends string | AccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA", TAccountAssociatedTokenProgram extends string | AccountMeta<string> = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL", TAccountSystemProgram extends string | AccountMeta<string> = "11111111111111111111111111111111",
    TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram>
      & InstructionWithData<ReadonlyUint8Array>
        & InstructionWithAccounts<[TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer, TAccountAuthority extends string ? WritableSignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority, TAccountMerchant extends string ? WritableAccount<TAccountMerchant> : TAccountMerchant, TAccountNewSettlementWallet extends string ? ReadonlyAccount<TAccountNewSettlementWallet> : TAccountNewSettlementWallet, TAccountSettlementUsdcAta extends string ? WritableAccount<TAccountSettlementUsdcAta> : TAccountSettlementUsdcAta, TAccountUsdcMint extends string ? ReadonlyAccount<TAccountUsdcMint> : TAccountUsdcMint, TAccountSettlementUsdtAta extends string ? WritableAccount<TAccountSettlementUsdtAta> : TAccountSettlementUsdtAta, TAccountUsdtMint extends string ? ReadonlyAccount<TAccountUsdtMint> : TAccountUsdtMint, TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram, TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram, TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram, ...TRemainingAccounts]>
  ;



export type UpdateMerchantSettlementWalletInstructionData = { discriminator: number;  };

export type UpdateMerchantSettlementWalletInstructionDataArgs = {  };




export function getUpdateMerchantSettlementWalletInstructionDataEncoder(): FixedSizeEncoder<UpdateMerchantSettlementWalletInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', getU8Encoder()]]), (value) => ({ ...value, discriminator: UPDATE_MERCHANT_SETTLEMENT_WALLET_DISCRIMINATOR }));
}



export function getUpdateMerchantSettlementWalletInstructionDataDecoder(): FixedSizeDecoder<UpdateMerchantSettlementWalletInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}




export function getUpdateMerchantSettlementWalletInstructionDataCodec(): FixedSizeCodec<UpdateMerchantSettlementWalletInstructionDataArgs, UpdateMerchantSettlementWalletInstructionData> {
  return combineCodec(getUpdateMerchantSettlementWalletInstructionDataEncoder(), getUpdateMerchantSettlementWalletInstructionDataDecoder());
}



export type UpdateMerchantSettlementWalletAsyncInput<TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountNewSettlementWallet extends string = string,
  TAccountSettlementUsdcAta extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountSettlementUsdtAta extends string = string,
  TAccountUsdtMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  >
=  {
  payer: TransactionSigner<TAccountPayer>;
authority: TransactionSigner<TAccountAuthority>;
/** Merchant PDA */
merchant?: Address<TAccountMerchant>;
newSettlementWallet: Address<TAccountNewSettlementWallet>;
settlementUsdcAta?: Address<TAccountSettlementUsdcAta>;
usdcMint?: Address<TAccountUsdcMint>;
settlementUsdtAta?: Address<TAccountSettlementUsdtAta>;
usdtMint?: Address<TAccountUsdtMint>;
tokenProgram?: Address<TAccountTokenProgram>;
associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
systemProgram?: Address<TAccountSystemProgram>;
}


export async function getUpdateMerchantSettlementWalletInstructionAsync<TAccountPayer extends string, TAccountAuthority extends string, TAccountMerchant extends string, TAccountNewSettlementWallet extends string, TAccountSettlementUsdcAta extends string, TAccountUsdcMint extends string, TAccountSettlementUsdtAta extends string, TAccountUsdtMint extends string, TAccountTokenProgram extends string, TAccountAssociatedTokenProgram extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS>(input: UpdateMerchantSettlementWalletAsyncInput<TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountNewSettlementWallet, TAccountSettlementUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram>, config?: { programAddress?: TProgramAddress } ): Promise<UpdateMerchantSettlementWalletInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountNewSettlementWallet, TAccountSettlementUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram>> {
  // Program address.
  const programAddress = config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              payer: { value: input.payer ?? null, isWritable: true },
              authority: { value: input.authority ?? null, isWritable: true },
              merchant: { value: input.merchant ?? null, isWritable: true },
              newSettlementWallet: { value: input.newSettlementWallet ?? null, isWritable: false },
              settlementUsdcAta: { value: input.settlementUsdcAta ?? null, isWritable: true },
              usdcMint: { value: input.usdcMint ?? null, isWritable: false },
              settlementUsdtAta: { value: input.settlementUsdtAta ?? null, isWritable: true },
              usdtMint: { value: input.usdtMint ?? null, isWritable: false },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              associatedTokenProgram: { value: input.associatedTokenProgram ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
  
  
  // Resolve default values.
if (!accounts.merchant.value) {
accounts.merchant.value = await getProgramDerivedAddress({ programAddress: 'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>, seeds: [getUtf8Encoder().encode("merchant"), getAddressEncoder().encode(expectAddress(accounts.authority.value))] });
}
if (!accounts.usdcMint.value) {
accounts.usdcMint.value = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v' as Address<'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'>;
}
if (!accounts.settlementUsdcAta.value) {
accounts.settlementUsdcAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.newSettlementWallet.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.usdcMint.value))] });
}
if (!accounts.usdtMint.value) {
accounts.usdtMint.value = 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB' as Address<'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'>;
}
if (!accounts.settlementUsdtAta.value) {
accounts.settlementUsdtAta.value = await getProgramDerivedAddress({ programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>, seeds: [getAddressEncoder().encode(expectAddress(accounts.newSettlementWallet.value)), getAddressEncoder().encode(address("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")), getAddressEncoder().encode(expectAddress(accounts.usdtMint.value))] });
}
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.associatedTokenProgram.value) {
accounts.associatedTokenProgram.value = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.payer),
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.merchant),
                  getAccountMeta(accounts.newSettlementWallet),
                  getAccountMeta(accounts.settlementUsdcAta),
                  getAccountMeta(accounts.usdcMint),
                  getAccountMeta(accounts.settlementUsdtAta),
                  getAccountMeta(accounts.usdtMint),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.associatedTokenProgram),
                  getAccountMeta(accounts.systemProgram),
                      ]      ,    programAddress,
          data: getUpdateMerchantSettlementWalletInstructionDataEncoder().encode({}),
      } as UpdateMerchantSettlementWalletInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountNewSettlementWallet, TAccountSettlementUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram>;

      return instruction;
  }


export type UpdateMerchantSettlementWalletInput<TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountNewSettlementWallet extends string = string,
  TAccountSettlementUsdcAta extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountSettlementUsdtAta extends string = string,
  TAccountUsdtMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  >
=  {
  payer: TransactionSigner<TAccountPayer>;
authority: TransactionSigner<TAccountAuthority>;
/** Merchant PDA */
merchant: Address<TAccountMerchant>;
newSettlementWallet: Address<TAccountNewSettlementWallet>;
settlementUsdcAta: Address<TAccountSettlementUsdcAta>;
usdcMint?: Address<TAccountUsdcMint>;
settlementUsdtAta: Address<TAccountSettlementUsdtAta>;
usdtMint?: Address<TAccountUsdtMint>;
tokenProgram?: Address<TAccountTokenProgram>;
associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
systemProgram?: Address<TAccountSystemProgram>;
}


export  function getUpdateMerchantSettlementWalletInstruction<TAccountPayer extends string, TAccountAuthority extends string, TAccountMerchant extends string, TAccountNewSettlementWallet extends string, TAccountSettlementUsdcAta extends string, TAccountUsdcMint extends string, TAccountSettlementUsdtAta extends string, TAccountUsdtMint extends string, TAccountTokenProgram extends string, TAccountAssociatedTokenProgram extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS>(input: UpdateMerchantSettlementWalletInput<TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountNewSettlementWallet, TAccountSettlementUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram>, config?: { programAddress?: TProgramAddress } ): UpdateMerchantSettlementWalletInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountNewSettlementWallet, TAccountSettlementUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram> {
  // Program address.
  const programAddress = config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

      // Original accounts.
    const originalAccounts = {
              payer: { value: input.payer ?? null, isWritable: true },
              authority: { value: input.authority ?? null, isWritable: true },
              merchant: { value: input.merchant ?? null, isWritable: true },
              newSettlementWallet: { value: input.newSettlementWallet ?? null, isWritable: false },
              settlementUsdcAta: { value: input.settlementUsdcAta ?? null, isWritable: true },
              usdcMint: { value: input.usdcMint ?? null, isWritable: false },
              settlementUsdtAta: { value: input.settlementUsdtAta ?? null, isWritable: true },
              usdtMint: { value: input.usdtMint ?? null, isWritable: false },
              tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
              associatedTokenProgram: { value: input.associatedTokenProgram ?? null, isWritable: false },
              systemProgram: { value: input.systemProgram ?? null, isWritable: false },
          };
    const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>;
  
  
  
  // Resolve default values.
if (!accounts.usdcMint.value) {
accounts.usdcMint.value = 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v' as Address<'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'>;
}
if (!accounts.usdtMint.value) {
accounts.usdtMint.value = 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB' as Address<'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'>;
}
if (!accounts.tokenProgram.value) {
accounts.tokenProgram.value = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
}
if (!accounts.associatedTokenProgram.value) {
accounts.associatedTokenProgram.value = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
}
if (!accounts.systemProgram.value) {
accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
}





      const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
    const instruction = {accounts: [
                  getAccountMeta(accounts.payer),
                  getAccountMeta(accounts.authority),
                  getAccountMeta(accounts.merchant),
                  getAccountMeta(accounts.newSettlementWallet),
                  getAccountMeta(accounts.settlementUsdcAta),
                  getAccountMeta(accounts.usdcMint),
                  getAccountMeta(accounts.settlementUsdtAta),
                  getAccountMeta(accounts.usdtMint),
                  getAccountMeta(accounts.tokenProgram),
                  getAccountMeta(accounts.associatedTokenProgram),
                  getAccountMeta(accounts.systemProgram),
                      ]      ,    programAddress,
          data: getUpdateMerchantSettlementWalletInstructionDataEncoder().encode({}),
      } as UpdateMerchantSettlementWalletInstruction<TProgramAddress, TAccountPayer, TAccountAuthority, TAccountMerchant, TAccountNewSettlementWallet, TAccountSettlementUsdcAta, TAccountUsdcMint, TAccountSettlementUsdtAta, TAccountUsdtMint, TAccountTokenProgram, TAccountAssociatedTokenProgram, TAccountSystemProgram>;

      return instruction;
  }


export type ParsedUpdateMerchantSettlementWalletInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
      TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
  > = {
  programAddress: Address<TProgram>;
      accounts: {
                      payer: TAccountMetas[0],
                      authority: TAccountMetas[1],
                        /** Merchant PDA */
                merchant: TAccountMetas[2],
                      newSettlementWallet: TAccountMetas[3],
                      settlementUsdcAta: TAccountMetas[4],
                      usdcMint: TAccountMetas[5],
                      settlementUsdtAta: TAccountMetas[6],
                      usdtMint: TAccountMetas[7],
                      tokenProgram: TAccountMetas[8],
                      associatedTokenProgram: TAccountMetas[9],
                      systemProgram: TAccountMetas[10],
          };
        data: UpdateMerchantSettlementWalletInstructionData;
  };

export function parseUpdateMerchantSettlementWalletInstruction<
  TProgram extends string,
      TAccountMetas extends readonly AccountMeta[],
  >(
  instruction: Instruction<TProgram>
          & InstructionWithAccounts<TAccountMetas>
              & InstructionWithData<ReadonlyUint8Array>
    ): ParsedUpdateMerchantSettlementWalletInstruction<TProgram , TAccountMetas> {
      if (instruction.accounts.length < 11) {
      // TODO: Coded error.
      throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
      const accountMeta = instruction.accounts![accountIndex]!;
      accountIndex += 1;
      return accountMeta;
    }
        return {
    programAddress: instruction.programAddress,
          accounts: {
                              payer: getNextAccount(),
                                        authority: getNextAccount(),
                                        merchant: getNextAccount(),
                                        newSettlementWallet: getNextAccount(),
                                        settlementUsdcAta: getNextAccount(),
                                        usdcMint: getNextAccount(),
                                        settlementUsdtAta: getNextAccount(),
                                        usdtMint: getNextAccount(),
                                        tokenProgram: getNextAccount(),
                                        associatedTokenProgram: getNextAccount(),
                                        systemProgram: getNextAccount(),
                        },
              data: getUpdateMerchantSettlementWalletInstructionDataDecoder().decode(instruction.data),
      };
}

