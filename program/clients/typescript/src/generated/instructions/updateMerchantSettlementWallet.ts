/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { COMMERCE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_MERCHANT_SETTLEMENT_WALLET_DISCRIMINATOR = 6;

export function getUpdateMerchantSettlementWalletDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_MERCHANT_SETTLEMENT_WALLET_DISCRIMINATOR);
}

export type UpdateMerchantSettlementWalletInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMerchant extends string | AccountMeta<string> = string,
  TAccountNewSettlementWallet extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMerchant extends string
        ? WritableAccount<TAccountMerchant>
        : TAccountMerchant,
      TAccountNewSettlementWallet extends string
        ? ReadonlyAccount<TAccountNewSettlementWallet>
        : TAccountNewSettlementWallet,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMerchantSettlementWalletInstructionData = {
  discriminator: number;
};

export type UpdateMerchantSettlementWalletInstructionDataArgs = {};

export function getUpdateMerchantSettlementWalletInstructionDataEncoder(): FixedSizeEncoder<UpdateMerchantSettlementWalletInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: UPDATE_MERCHANT_SETTLEMENT_WALLET_DISCRIMINATOR,
    })
  );
}

export function getUpdateMerchantSettlementWalletInstructionDataDecoder(): FixedSizeDecoder<UpdateMerchantSettlementWalletInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getUpdateMerchantSettlementWalletInstructionDataCodec(): FixedSizeCodec<
  UpdateMerchantSettlementWalletInstructionDataArgs,
  UpdateMerchantSettlementWalletInstructionData
> {
  return combineCodec(
    getUpdateMerchantSettlementWalletInstructionDataEncoder(),
    getUpdateMerchantSettlementWalletInstructionDataDecoder()
  );
}

export type UpdateMerchantSettlementWalletAsyncInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountNewSettlementWallet extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  /** Merchant PDA */
  merchant?: Address<TAccountMerchant>;
  newSettlementWallet: Address<TAccountNewSettlementWallet>;
};

export async function getUpdateMerchantSettlementWalletInstructionAsync<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountMerchant extends string,
  TAccountNewSettlementWallet extends string,
  TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UpdateMerchantSettlementWalletAsyncInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountNewSettlementWallet
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateMerchantSettlementWalletInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountNewSettlementWallet
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    merchant: { value: input.merchant ?? null, isWritable: true },
    newSettlementWallet: {
      value: input.newSettlementWallet ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.merchant.value) {
    accounts.merchant.value = await getProgramDerivedAddress({
      programAddress:
        'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT' as Address<'commkU28d52cwo2Ma3Marxz4Qr9REtfJtuUfqnDnbhT'>,
      seeds: [
        getUtf8Encoder().encode('merchant'),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.newSettlementWallet),
    ],
    data: getUpdateMerchantSettlementWalletInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateMerchantSettlementWalletInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountNewSettlementWallet
  >);
}

export type UpdateMerchantSettlementWalletInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountMerchant extends string = string,
  TAccountNewSettlementWallet extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  /** Merchant PDA */
  merchant: Address<TAccountMerchant>;
  newSettlementWallet: Address<TAccountNewSettlementWallet>;
};

export function getUpdateMerchantSettlementWalletInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountMerchant extends string,
  TAccountNewSettlementWallet extends string,
  TProgramAddress extends Address = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UpdateMerchantSettlementWalletInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountNewSettlementWallet
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateMerchantSettlementWalletInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountMerchant,
  TAccountNewSettlementWallet
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMMERCE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    merchant: { value: input.merchant ?? null, isWritable: true },
    newSettlementWallet: {
      value: input.newSettlementWallet ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.newSettlementWallet),
    ],
    data: getUpdateMerchantSettlementWalletInstructionDataEncoder().encode({}),
    programAddress,
  } as UpdateMerchantSettlementWalletInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountMerchant,
    TAccountNewSettlementWallet
  >);
}

export type ParsedUpdateMerchantSettlementWalletInstruction<
  TProgram extends string = typeof COMMERCE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    authority: TAccountMetas[1];
    /** Merchant PDA */
    merchant: TAccountMetas[2];
    newSettlementWallet: TAccountMetas[3];
  };
  data: UpdateMerchantSettlementWalletInstructionData;
};

export function parseUpdateMerchantSettlementWalletInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateMerchantSettlementWalletInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      merchant: getNextAccount(),
      newSettlementWallet: getNextAccount(),
    },
    data: getUpdateMerchantSettlementWalletInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
