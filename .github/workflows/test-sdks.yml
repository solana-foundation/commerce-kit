name: Test SDKs

on:
  push:
    branches: [ main ]
    paths:
      - 'program/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'program/**'
      - '.github/workflows/**'

permissions:
  contents: read

jobs:
  test-typescript:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Solana CLI
        run: |
          curl -sSfL https://release.solana.com/v1.18.20/install | sh
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Install dependencies (root)
        run: bun install

      - name: Build Solana program
        working-directory: program
        run: make build

      - name: Generate TypeScript client
        working-directory: program
        run: bun run generate-clients

      - name: Install TypeScript dependencies
        working-directory: program/clients/typescript
        run: bun install

      - name: Build TypeScript SDK
        working-directory: program/clients/typescript
        run: bun run build

      - name: Type check TypeScript SDK
        working-directory: program/clients/typescript
        run: bun run type-check

      - name: Run TypeScript unit tests
        working-directory: program/clients/typescript
        run: bun run test:ci:unit

      - name: Run TypeScript integration tests
        working-directory: program/clients/typescript
        run: bun run test:ci:integration

  test-rust:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Solana CLI
        run: |
          curl -sSfL https://release.solana.com/v1.18.20/install | sh
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            program/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Bun for client generation
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Build Solana program
        working-directory: program
        run: make build

      - name: Generate Rust client
        working-directory: program
        run: |
          bun install
          cargo install --force --locked codama-cli || echo "Codama CLI installation failed or already installed"
          bun run generate-clients

      - name: Format check Rust client
        working-directory: program/clients/rust
        run: cargo fmt --check

      - name: Lint Rust client
        working-directory: program/clients/rust
        run: cargo clippy -- -D warnings

      - name: Build Rust client
        working-directory: program/clients/rust
        run: cargo build

      - name: Run Rust client tests
        working-directory: program/clients/rust
        run: cargo test

      - name: Run integration tests
        working-directory: program/tests/integration-tests
        run: cargo test

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check Rust formatting
        working-directory: program
        run: cargo fmt --check

      - name: Lint Rust code
        working-directory: program
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: program/clients/typescript
        run: bun install

      - name: Check TypeScript formatting (if prettier config exists)
        working-directory: program/clients/typescript
        run: |
          if [ -f "package.json" ] && bun pm ls | grep -q prettier; then
            bunx prettier --check "**/*.{ts,tsx,js,jsx,json}"
          else
            echo "Prettier not configured, skipping format check"
          fi