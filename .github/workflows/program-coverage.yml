name: Combined Coverage Report

on:
  workflow_run:
    workflows: ["Program Unit Tests", "Program Integration Tests", "TypeScript SDK Unit Tests", "TypeScript SDK Integration Tests"]
    types:
      - completed
  workflow_dispatch:
  push:
    branches: [main, feat/coverage-ci]
    paths:
      - ".github/workflows/program-coverage.yml"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/program-coverage.yml"

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: info

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  combine-coverage:
    name: Combine Coverage Reports
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && contains(fromJson('["Program Unit Tests", "Program Integration Tests", "TypeScript SDK Unit Tests", "TypeScript SDK Integration Tests"]'), github.event.workflow_run.name)) || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' }}
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download unit test coverage
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage-reports
          path: coverage-artifacts/unit
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ github.token }}
        continue-on-error: true

      - name: Download integration test coverage
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: integration-coverage-reports
          path: coverage-artifacts/integration
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ github.token }}
        continue-on-error: true

      - name: Download TypeScript unit coverage
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: ts-unit-coverage-reports
          path: coverage-artifacts/ts-unit
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ github.token }}
        continue-on-error: true

      - name: Download TypeScript integration coverage
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: ts-integration-coverage-reports
          path: coverage-artifacts/ts-integration
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ github.token }}
        continue-on-error: true

      - name: Setup coverage tools
        run: |
          # Install tools for combining coverage reports and math calculations
          npm install -g lcov-result-merger
          sudo apt-get update && sudo apt-get install -y bc jq

      - name: Combine Rust coverage reports
        run: |
          if [ -f coverage-artifacts/unit/program/coverage-unit.lcov ] && [ -f coverage-artifacts/integration/program/coverage-integration.lcov ]; then
            echo "Combining Rust coverage reports..."
            lcov-result-merger 'coverage-artifacts/**/*.lcov' coverage-combined.lcov
            echo "‚úÖ Combined coverage report generated"
          else
            echo "‚ö†Ô∏è Some coverage reports are missing, skipping combination"
            echo "Looking for:"
            echo "- coverage-artifacts/unit/program/coverage-unit.lcov"
            echo "- coverage-artifacts/integration/program/coverage-integration.lcov"
            echo "Files found:"
            find coverage-artifacts -name "*.lcov" -type f || echo "No .lcov files found"
          fi

      - name: Generate coverage summary
        id: coverage-summary
        run: |
          echo "üìä Coverage Summary Report"
          echo "========================="
          
          # Initialize coverage summary
          COVERAGE_SUMMARY=""
          
          # Parse Rust Unit Test coverage
          if [ -f coverage-artifacts/unit/program/coverage-unit.lcov ]; then
            echo "## Rust Unit Tests"
            LINES_FOUND=$(grep -E "^LF:" coverage-artifacts/unit/program/coverage-unit.lcov | awk -F: '{sum += $2} END {print sum}')
            LINES_HIT=$(grep -E "^LH:" coverage-artifacts/unit/program/coverage-unit.lcov | awk -F: '{sum += $2} END {print sum}')
            if [ "$LINES_FOUND" -gt 0 ]; then
              RUST_UNIT_COV=$(echo "scale=1; $LINES_HIT * 100 / $LINES_FOUND" | bc)
              echo "Rust Unit Tests: ${RUST_UNIT_COV}%"
              COVERAGE_SUMMARY="${COVERAGE_SUMMARY}**Rust Unit Tests:** ${RUST_UNIT_COV}%\n"
            fi
          fi

          # Parse Rust Integration Test coverage
          if [ -f coverage-artifacts/integration/program/coverage-integration.lcov ]; then
            echo "## Rust Integration Tests"
            LINES_FOUND=$(grep -E "^LF:" coverage-artifacts/integration/program/coverage-integration.lcov | awk -F: '{sum += $2} END {print sum}')
            LINES_HIT=$(grep -E "^LH:" coverage-artifacts/integration/program/coverage-integration.lcov | awk -F: '{sum += $2} END {print sum}')
            if [ "$LINES_FOUND" -gt 0 ]; then
              RUST_INT_COV=$(echo "scale=1; $LINES_HIT * 100 / $LINES_FOUND" | bc)
              echo "Rust Integration Tests: ${RUST_INT_COV}%"
              COVERAGE_SUMMARY="${COVERAGE_SUMMARY}**Rust Integration Tests:** ${RUST_INT_COV}%\n"
            fi
          fi
          
          # Parse TypeScript Unit Test coverage
          if [ -f coverage-artifacts/ts-unit/coverage-summary.json ]; then
            echo "## TypeScript Unit Tests"
            TS_UNIT_COV=$(cat coverage-artifacts/ts-unit/coverage-summary.json | jq -r '.total.lines.pct')
            echo "TypeScript Unit Tests: ${TS_UNIT_COV}%"
            COVERAGE_SUMMARY="${COVERAGE_SUMMARY}**TypeScript Unit Tests:** ${TS_UNIT_COV}%\n"
          fi
          
          # Parse TypeScript Integration Test coverage
          if [ -f coverage-artifacts/ts-integration/coverage-summary.json ]; then
            echo "## TypeScript Integration Tests"
            TS_INT_COV=$(cat coverage-artifacts/ts-integration/coverage-summary.json | jq -r '.total.lines.pct')
            echo "TypeScript Integration Tests: ${TS_INT_COV}%"
            COVERAGE_SUMMARY="${COVERAGE_SUMMARY}**TypeScript Integration Tests:** ${TS_INT_COV}%\n"
          fi
          
          # Save summary for PR comment
          echo "COVERAGE_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo -e "$COVERAGE_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post coverage comment on PR
        if: github.event_name == 'workflow_run' && github.event.workflow_run.event == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageSummary = `${{ steps.coverage-summary.outputs.COVERAGE_SUMMARY }}`;
            
            const comment = `## üìä Coverage Report
            
            ${coverageSummary}
            
            <details>
            <summary>üìÅ View Coverage Artifacts</summary>
            
            Coverage reports have been generated for all test suites:
            - [Combined Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - Individual test coverage artifacts available in workflow runs
            
            </details>`;

            // Find the PR number from the triggering workflow
            const prNumber = ${{ github.event.workflow_run.pull_requests[0].number || 'null' }};
            
            if (!prNumber) {
              console.log('No PR number found, skipping comment');
              return;
            }

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## üìä Coverage Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing coverage comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
              console.log('Created new coverage comment');
            }

      - name: Upload combined coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-report
          path: |
            coverage-combined.lcov
            coverage-artifacts/
          retention-days: 30
